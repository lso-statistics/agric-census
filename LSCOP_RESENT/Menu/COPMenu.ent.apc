PROC GLOBAL

// Arrays for dynamic value sets
array numeric codes(200);

array string labels(200);
array string mycodes(200);
array string mylabels(200);
array string myID(200);
array string EAarray(50);

array ageBySex5YearGroups(22, 2);

string menuApplicationFolder, householdApplicationFolder, assSupRevApplicationFolder;
string supervisorDataFileFolder, enumeratorDataFileFolder;
string loginFilename, eacode, enumeratorEA;
string enumeratorDataFileName,enumeratorDataFileNameCopy; //
string supervisorDataFilename; //
string enumtempFileName; //
numeric postChecked = 0, ea, totMales = 0, totFemales = 0, totPopulation = 0, seekingApproval = 0; //

list string fileListing; //variable to store all data files in a directory

file tmpFile;
//file tempFile;
file pffFile; // File variable for writing out data entry pff file


function string getSupervisorDataFilename() // get the supervisor data filename from the enumerator data filename
	numeric lastSlash = length(enumeratorDataFileName);
	
	do while lastSlash > 0 and not enumeratorDataFileName[lastSlash:1] in "\","/"
		lastSlash = lastSlash - 1;
	enddo;
	
	// combine the file name to the supervisor data path
	getSupervisorDataFilename = maketext("%sRV%s",supervisorDataFileFolder,enumeratorDataFileName[lastSlash + 1]);

end;


//********************************************************************************************************

function OnStop() // if they try to stop adding data without finishing the case

	numeric selection;
	selection = errmsg("Are you sure you want to quit the program?")
	select("Yes",continue,"No",continue);

	if selection = 1 then
		filedelete(loginFilename);
		stop(1);
	else
		reenter;
	endif;

end;

function pickEA()
	      
    numeric i;
    
    dirlist(fileListing,enumeratorDataFileFolder,"*.dat");
        
        if length(fileListing) > 0 then
           EAarray(1) = "View All";
            do i = 1 while i <= length(fileListing)
                eacode = fileListing(i)[length(fileListing(i))-14:11];
                EAarray(i + 1) = eacode;
            enddo;
        else
            errmsg("No data files found.");
            reenter;
        endif;
        
        EAarray(i+1) = "";
        
    numeric indexChosen = accept("Choose EA", EAarray);
    if indexChosen = 0 then
        reenter;
    endif;
    
    pickEA = indexChosen - 1;
    
end;

//************************************************************************************************************
//************************************************************************************************************

function CreateAndRunPFF()

	string tempFolder = pathname(Temp);
	string pffFilename = tempFolder + "COP_DataEntry.pff";
	string fileDescription = maketext("EA - %011d", STAFF_EA);
	
	setfile(pffFile,pffFilename,create);

	filewrite(pffFile,"[Run Information]");
	filewrite(pffFile,"Version=CSPro 7.0");
	filewrite(pffFile,"AppType=Entry");
	filewrite(pffFile,"Description=2020 LESOTHO COP(%s)", fileDescription);

	filewrite(pffFile,"[DataEntryInit]");
	filewrite(pffFile,"[Files]");
	filewrite(pffFile,"Application=%sCOP_DataEntry.ent", householdApplicationFolder);	
	enumeratorDataFilename = maketext("%011d.dat", STAFF_EA);
	filewrite(pffFile,"InputData=%s%s",enumeratorDataFileFolder,enumeratorDataFilename);
		
	filewrite(pffFile,"[Parameters]");
	filewrite(pffFile,"DISTRICT=%02d",S_DISTRICT);
	filewrite(pffFile,"CONSTITUENCY=%02d",S_CONSTITUENCY);
	filewrite(pffFile,"COMMUNITY_COUNCIL=%s",S_COMMUNITY_COUNCIL);
	filewrite(pffFile,"ZONE=%d",S_ZONE);
	filewrite(pffFile,"SETTLEMENT=%d",S_SETTLEMENT);
	filewrite(pffFile,"ENUMERATION_AREA=%011d",STAFF_EA);
	filewrite(pffFile,"PSU_CODE=%07d",STAFF_PSU);
	filewrite(pffFile,"STAFF_CODE=%s",USER_CODE);

	//
	close(pffFile);

	numeric result = execpff(filename(pffFile), stop);
	if result <> 1 then
		errmsg("Failed to launch household data entry");
		reenter;
	endif;

end;

// File variable for writing out supervisor review pff file
file sr_pffFile;

function CreateAndRunSRPFF()

	string tempFolder = pathname(Temp);
	string pffFilename = tempFolder + "AssistSupReview.pff";
	string fileDescription = maketext("EA - %011d", ENUMERATION_AREA);

	setfile(sr_pffFile,pffFilename,create);

	filewrite(sr_pffFile,"[Run Information]");
	filewrite(sr_pffFile,"Version=CSPro 7.0");
	filewrite(sr_pffFile,"AppType=Entry");
	filewrite(sr_pffFile,"Description=2020 LESOTHO COP(%s)", fileDescription);

	filewrite(sr_pffFile,"[DataEntryInit]");
	filewrite(sr_pffFile,"StartMode=Add;%s", key(COP_DICT_DICT));	

	filewrite(sr_pffFile,"[Files]");
	filewrite(sr_pffFile,"Application=%sAssistSupReview.ent", assSupRevApplicationFolder);
	supervisorDataFilename = getSupervisorDataFilename();
	filewrite(sr_pffFile,"InputData=%s",supervisorDataFilename);

	filewrite(sr_pffFile,"[Parameters]");
	filewrite(sr_pffFile,"DISTRICT=%d",DISTRICT);
	filewrite(sr_pffFile,"CONSTITUENCY=%d",CONSTITUENCY);
	filewrite(sr_pffFile,"COMMUNITY_COUNCIL=%s",COMMUNITY_COUNCIL);
	filewrite(sr_pffFile,"ZONE=%d",ZONE);
	filewrite(sr_pffFile,"SETTLEMENT=%d",SETTLEMENT);
	filewrite(sr_pffFile,"ENUMERATION_AREA=%d",ENUMERATION_AREA);
	filewrite(sr_pffFile,"VILLAGE_NUMBER=%d",VILLAGE_NUMBER);
	filewrite(sr_pffFile,"VILLAGE_NAME=%s",VILLAGE_NAME);
	filewrite(sr_pffFile,"HOUSEHOLD_NUMBER=%d",HOUSEHOLD_NUMBER);
	filewrite(sr_pffFile,"HOUSEHOLD_HEAD_NAMES=%s",HOUSEHOLD_HEAD_NAMES);
	filewrite(sr_pffFile,"STAFF_CODE=%s",USER_CODE);
	
	close(sr_pffFile);

	numeric result = execpff(filename(sr_pffFile), stop);
	if result <> 1 then
		errmsg("Failed to launch assistant supervisor review data entry");
		reenter;
	endif;

end;
{
function CreateAndRunCSPFF()

	string tempFolder = pathname(Temp);
	string pffFilename = tempFolder + "HouseholdDataEntry.pff";
	string fileDescription = maketext("EA - %s", CONSTITUENCY_EACODE);
	
	setfile(pffFile,pffFilename,create);

	filewrite(pffFile,"[Run Information]");
	filewrite(pffFile,"Version=CSPro 6.2");
	filewrite(pffFile,"AppType=Entry");
	filewrite(pffFile,"Description=2016 LESOTHO PHC(%s)", fileDescription);

	filewrite(pffFile,"[DataEntryInit]");
	filewrite(pffFile,"Startmode=Modify;%s",IDENTIFIER);
	filewrite(pffFile,"[Files]");
	filewrite(pffFile,"Application=%sHouseholdDataEntry.ent", 
	);	
	
	filewrite(pffFile,"InputData=%s",enumeratorDataFilename);
	
	close(pffFile);

	numeric result = execpff(filename(pffFile), stop);
	if result <> 1 then
		errmsg("Failed to launch household data entry");
		reenter;
	endif;

end;
}

{
Logic for removal of duplicate records from HouseholdDataEntry data files.
Normally this would not be needed as CSPro will not allow the creation of
duplicate cases however due to a bug in an earlier version of CSPro the system
was generating extra copies of a case on partial save. This logic attempts
to remove any of these extra copies from all data files in a directory.
}

// max total cases allowed in single data file
numeric maxCases = 9999; 

// max number of copies of a single case
numeric maxDups = 999;

// stores the list of unique case ids found in the data file
array string caseIds(maxCases);

// stores the starting/ending line #s in data file for each copy of case whose
// id is in corresponding index in caseIds array.
array caseStartLines(maxCases, maxDups);
array caseEndLines(maxCases, maxDups);

// Number of times case with id at corresponding index in caseIds array
// occurs in the data file. This will be the maximum valid index for this
// case in the caseStartLines/caseEndLines/caseNumValidRecords arrays.
array caseNumCopies(maxCases);

// Completeness score for each case.
// First dimension is the case index in caseIds array
// and second index is the copy number which will between
// one and caseNumCopies for the same index.
array caseScores(maxCases, maxDups);

//file removeDupsReport, removeDupsInput, removeDupsOutput, removeDupsReportBackup;

// Total number of unique cases found in data file.
// This is actual size of caseIds array.
numeric uniqueCasesInFile = 0;

// Total cases, including duplicates, found in data file.
numeric totalCasesInFile = 0;

list string dataFileListing;

// Return index of case in caseIds array whose
// case id matches the string id.
function findCase(string id)
	numeric i;
	do i = 1 while i <= uniqueCasesInFile
		if caseIds(i) = id then
			findCase = i;
			exit;
		endif;
	enddo;
	findCase = 0;
end;

// Add a case to the caseIds, caseStartLines and caseNumCopies arrays.
function addCase(string id, lineNo)
	numeric caseIndex = findCase(id);
	if caseIndex = 0 then
		// First time we are seeing this case. Add it to the arrays.
		inc(uniqueCasesInFile);
		if uniqueCasesInFile > maxCases then
			errmsg("Max number of cases (%d) exceeded, try breaking this up into smaller files",  maxCases);
			addCase = 0;
			exit;
		endif;
		caseIndex = uniqueCasesInFile;
		caseIds(caseIndex) = id;
		caseNumCopies(caseIndex) = 0;
	endif;
	
	// Update the number of copies found.
	inc(caseNumCopies(caseIndex));
	if caseNumCopies(caseIndex) > maxDups then
		errmsg("Max number of dups per case (%d) exceeded for case %s", maxDups, id);
		addCase = 0;
		exit;
	endif;
	
	// Add the start line for this occurrence of case.
	caseStartLines(caseIndex, caseNumCopies(caseIndex)) = lineNo;
	
	addCase = 1;
end

// Add a end line to caseEndlines array and num valid records for case to caseNumValidRecords array.
function addEndLineAndScore(string id, endLine, score)
	numeric caseIndex = findCase(id);
	caseEndLines(caseIndex, caseNumCopies(caseIndex)) = endLine;
	caseScores(caseIndex, caseNumCopies(caseIndex)) = score;
end;

// Create backup folder as child of baseBackupFolder with current date/time and return path.
function string createBackupFolder(string baseBackupFolder)
	dircreate(baseBackupFolder);
	string folder = maketext("%s%08d%06d/", baseBackupFolder, sysdate("YYYYMMDD"), systime());
	dircreate(folder);
	createBackupFolder = folder;
end;

function string filenameFromPath(string path)
	numeric i;
	do i = length(path) while i >= 1 and not path[i:1] in "/", "\" by -1
	enddo;
	filenameFromPath = path[i + 1];
end;

function backupFile(string dataFilePath, string backupFolder)
	string dataFileName = filenameFromPath(dataFilePath);
	backupFile = filecopy(dataFilePath, backupFolder + dataFileName);
end;

function backupDataFiles(string dataFileFolder, string fileMask, string baseBackupFolder)
    dirlist(dataFileListing,dataFileFolder, fileMask);
	string backupFolder = createBackupFolder(baseBackupFolder);
	numeric result = 1;
	numeric dataFileCtr;
	do dataFileCtr = 1 while dataFileCtr <= length(dataFileListing)
		string dataFilePath = dataFileListing(dataFileCtr);
		if backupFile(dataFilePath, backupFolder) <> 1 then
			result = 0;
		endif;
	enddo;
	backupDataFiles = result;
end;


// Find the copy of the case in the data file that has
// is the most "complete", i.e. has the final result code
// set to complete and/or the most valid records.
// In the case of ties pick the one that comes last in the
// data file. Returns index of the copy in the array
// of start/end lines for the case.
function getCaseCopyToKeep(caseIndex)
	numeric i;
	numeric maxValidIndex = 0;
	numeric maxScore = 0;
	do i = 1 while i <= caseNumCopies(caseIndex)
		numeric score = caseScores(caseIndex, i);
		if score >= maxScore then
			maxValidIndex = i;
			maxScore = score;
		endif;
	enddo;
	getCaseCopyToKeep = maxValidIndex;
end;

{function computeRecordScore(string line)

	numeric score = 0;
	string lineRecType = line[1:1];
	if lineRecType = "V" then
		// Final result code gives the most points since
		// a completed case should always win out over an incomplete case
		numeric finalResultCode = tonumber(line[155:1]);
		if finalResultCode = 1 then
			score = score + 10000;
		endif;
		// If result codes are equal then a case with more
		// visits should win
		numeric numberOfVisits = tonumber(line[129:1]);
		if numberOfVisits in 1:3 then
			score = score + 1000 * numberOfVisits;
		endif;
	elseif lineRecType = "H" then
		// Give an additional point for presence of housing record even if
		// it is empty so we keep cases with empty housing and visits over
		// cases with just visits
		score = score + 1;
		// If deaths portion of housing record is filled in then
		// then they got past all invidividuals so the case gets 100 points
		string deathsPart = line[129:3];
		if deathsPart <> "" then
			score = score + 100;
		endif;
		// If housing section is filled in then
		// then they got almost to the end so the case an
		// additional 100
		string housingSectionPart = line[132:135];
		if housingSectionPart <> "" then
			score = score + 100;
		endif;
	elseif lineRecType = "I" then
		// For individual records one point for the name
		// and two points for info beyond the name.
		// Individual record are not weighted highly since
		// often individual records are deleted in later visits.
		string namesPart = line[131:40];
		if namesPart <> "" then
			score = score + 1;
		endif;
		string demographicsPart = line[171:519];
		if demographicsPart <> "" then
			score = score + 2;
		endif;
	elseif lineRecType = "D" then
		// For death records one point for the name
		// and two points for info beyond the name.
		// Death record are not weighted highly since
		// often death records are deleted in later visits.
		namesPart = line[129:30];
		if namesPart <> "" then
			score = score + 1;
		endif;
		demographicsPart = line[159];
		if demographicsPart <> "" then
			score = score + 2;
		endif;
	endif;
	computeRecordScore = score;
end;}

// Concatenate all files in dataFileFolder matching fileMask into one file at concatedFilePath.
// It is safe to have concatenated be one of the folders being concatenated.
function concatenateFiles(string dataFileFolder, string fileMask, string concatenatedFilePath)

	// Write to a temp file that we will use to replace the concatenated file once complete.
	string tmpFilePath = dataFileFolder + "tmpDataForRemoveDups.dat";
	
	if fileconcat(tmpFilePath, dataFileFolder + fileMask) then
	
		filedelete(dataFileFolder + fileMask);
		if filerename(tmpFilePath, concatenatedFilePath) = 0 then
			concatenateFiles = 0;
			exit;
		endif;
		concatenateFiles = 1;
	else
		concatenateFiles = 0;
	endif;	
end;




PROC COPRODUCTIONMENU_FF
preproc

loginFilename = pathname(Application) + "login.txt";
enumeratorEA = pathname(Application) + "eacode.txt";	
menuApplicationFolder = pathname(Application);
enumeratorDataFileFolder = menuApplicationFolder + "../../Data/Enumerator/";
supervisorDataFileFolder = menuApplicationFolder + "../../Data/Supervisor/";
householdApplicationFolder = menuApplicationFolder + "../HouseholdDataEntry/";
assSupRevApplicationFolder = menuApplicationFolder + "../AssistSupReview/";

dircreate(enumeratorDataFileFolder);
dircreate(supervisorDataFileFolder);
dircreate(householdApplicationFolder);
dircreate(assSupRevApplicationFolder);

// Check to see if user is already logged in
if fileexist(enumeratorEA) = 1 then
	if setfile(tmpFile, enumeratorEA) = 1 then
		string codeString;
		numeric result = fileread(tmpFile, codeString);
		if result = 1 then
			// We have read in ea code from eacode file
			ea = tonumber(codeString);
		endif;
		close(tmpFile);
	endif;
endif;

enumeratorDataFilename = maketext("%s%011d.dat", enumeratorDataFileFolder, ea);

string SDFolder = pathname(CSEntryExternal);

dircreate(SDFolder);
filecopy(enumeratorDataFilename, SDFolder);

PROC USER_CODE
preproc

// Check to see if user is already logged in
if fileexist(loginFilename) = 1 then
	if setfile(tmpFile, loginFilename) = 1 then
		string codeString;
		numeric result = fileread(tmpFile, codeString);
		if result = 1 then
			// We have read in staff code from login file
			// we need to check that it is valid by looking it up in
			// the staff lookup file.
			//STAFF_CODE = tonumber(codeString);
			STAFF_CODE = codeString;
			if loadcase(STAFF_DICT, STAFF_CODE) = 1 then
				// User code from login file is valid, use noinput
				// to avoid entering user code.
				USER_CODE = STAFF_CODE;
				noinput;
			endif;
		endif;
		close(tmpFile);
	endif;
endif;

postproc
// Validate user code is correct
// Go to either enumerator menu or supervisor menu
// depending on the role of the user.

STAFF_CODE = USER_CODE;
if loadcase(STAFF_DICT, STAFF_CODE) = 0 then
	// The code was not found in the staff lookup file.
	errmsg("Invalid user code. Try again.");
	reenter;
else
	// Found the code in the staff lookup file.
	// STAFF_ROLE and STAFF_NAME are now filled in with values
	// from the lookup file.
	if not STAFF_ROLE in 1:3 then
		errmsg("Invalid role");
		reenter;
	else
	
		// Login successfull, save out the staff code
		// so that they don't have to login again until they logout.
		if setfile(tmpFile, loginFilename, create) = 1 then
			filewrite(tmpFile, "%s", STAFF_CODE);
			close(tmpFile);
			
			//Save out the enumeration area for the enumerator so that the assisstant supervisor can use it to postcheck 
			//households
			if STAFF_ROLE = 1 then
				if setfile(tmpFile, enumeratorEA, create) = 1 then
					filewrite(tmpFile, "%011d", STAFF_EA);
					close(tmpFile);
				endif;
			endif;
		endif;
				
		
		// Go to appropriate menu for staff role.	
		if STAFF_ROLE = 1 then
			skip to ENUMERATOR_MENU;
		elseif STAFF_ROLE = 2 then
			skip to ASSISTANT_SUPERVISOR_MENU;
		elseif STAFF_ROLE = 3 then
			skip to CONSTITUENCY_SUPERVISOR_MENU;
		endif;
	endif;
endif;

PROC ENUMERATOR_MENU
preproc
userbar(clear);
//userbar(add button, "Remove Duplicate Households (Enumerator Data Files)", removeDuplicates(enumeratorDataFileFolder, enumeratorDataFileFolder + "BackupsForDupRemoval/"));
userbar(show);

postproc
if ENUMERATOR_MENU = 1 then		//launch the screen for household data entry
	// Launch data entry
	CreateAndRunPFF();
elseif ENUMERATOR_MENU = 2 then		//send data to the supervisor
	{if syncdata("SyncWithSupervisor.pnc") then
		errmsg("Sync was successful");
		stop(0);
	else
		reenter;
	endif;}
elseif ENUMERATOR_MENU = 9 then
	// Logout	
	// Erase login file so that we don't automatically
	// login next time.
	filedelete(loginFilename);	
	// Quit data entry
	stop(1);
endif;

