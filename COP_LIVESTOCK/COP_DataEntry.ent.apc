{Application 'COP_DATAENTRY' logic file generated by CSPro}
PROC GLOBAL

// ------------------------------VARIABLE TO HELP DETERMINE IF HOUSEHOLD HAS THESE TYPES OF LIVESTOCK---------
numeric hasCattle =0;
numeric hasSheep = 0;
numeric hasGoats = 0; 
numeric hasChickens = 0;

numeric CensusYear = 2020;
numeric CensusMonth = 4;
numeric YoungestAgeMarriage = 12;
numeric MaxNumOfYrsOutsideLesotho = 3;
numeric MinAgeDiffBtwnChildAndParent = 12;
numeric MinRetirementAge = 24;
numeric MinAgeForFertility = 12;
numeric MaxAgeForFertility = 50;
numeric MinAgeForEducation = 3;
numeric MinAgeForEconomicActivity = 10;
numeric MinAgeWorkRSA = 5;
numeric i = 1, j = 1, numberOfCrops, numberOfFields;

// declare arrays dynamic value set
array numeric codes(100);
array string labels(100);
string crops;
array numeric respondentCodes(100);
array string respondentLabels(100);

//Max of 50 people in a household with 2 (person number and person name) columns to be displayed.
array string personsArray(50, 2);
array string deceasedArray(30, 1);

// Show list of entries in persons roster in a dialog
// and let interviewer pick one.
// Returns the row number of the person that was picked
// or zero if the dialog was cancelled.
function PickFromPERSON_ROSTER()
	numeric person;

	do person = 1 while person <= totocc(PERSON_ROSTER);
		personsArray(person, 1) =  maketext("%d", visualvalue(B1(person)));
		personsArray(person, 2) =  strip(B2(person));
	enddo;

	personsArray(person, 1) = "";
	numeric picked = showarray(personsArray, title("Person Number", "Names"));
	PickFromPERSON_ROSTER = picked;
end;
//------------------------------------------------------------------------------------------

function UpdateOccurrenceLabels()
	// Fill in occurrence labels for individual rosters
	// in case we are coming into a partially saved case or
	// are in modify mode in which case the names have been entered
	// but are not yet set in case tree since we have not yet gotten
	// to field B2 (names).
	//numeric i;
	do i = 1 while i <= maxocc(PERSON_ROSTER)

		string occurrenceLabel;
		if i <= totocc(PERSON_ROSTER) then
			occurrenceLabel = strip(B2(i));
		else
			// Work around bug in CSPro where when entering a new case
			// the occurrence labels from the previous case are still there.
			// This will replace the occurrence label with the row number 1,2,3...
			occurrenceLabel = maketext("%d",i);
		endif;

		setocclabel(PERSON_ROSTER(i), occurrenceLabel);
		setocclabel(DEMOGRAPHIC_ROSTER(i), occurrenceLabel);
		
	enddo;

end;
//----------------------------------------------------------------------------------------------------
function DeletePerson()

	numeric person = PickFromPERSON_ROSTER();
	if person > 0 then
		numeric choice = errmsg("Do you really want to delete %s's record?", strip(B2(person)))
		select("YES",CONTINUE, "NO",CONTINUE);

		if choice = 1 then

			if person = 1 then
				errmsg("You cannot delete %s's record because %s is Household head", strip(B2(person)), strip(B2(person)));

			else
				delete (PERSON_ROSTER(person));

				if person <= totocc(DEMOGRAPHIC_ROSTER) then
					delete (DEMOGRAPHIC_ROSTER(person));
				endif;
				NUMBER_OF_HOUSEHOLD_MEMBERS = totocc(PERSON_ROSTER);
				UpdateOccurrenceLabels();

				//numeric i;
				do i = person while i <= totocc(PERSON_ROSTER);
					B1(i) = i;
				enddo;

				numeric lastPerson = totocc(PERSON_ROSTER);
				move to ANYMORE_PEOPLE(lastPerson) advance;

			endif;

		endif;

	endif;

end;

//a function to display date the application was published. This will help us to identify the latest application
function showVersion()

	numeric publishDay = int(publishdate() / 1000000); // ignore the time
	errmsg("Application published on: %d", publishDay);
	//if datediff(publishDay,sysdate("YYYYMMDD")) > 20 then
	//    errmsg("This program expires after 20 days. Sync to get a new program.");	    
	//endif; 
end;

//-------------------------------------------------------------------------------------------------------

//a function to capture the gps coordinates of the household
function captureHH_Coordinates()
	if gps(open) = 1 then //try to open a gps connection and if successful
		if gps(read, 120) then //take the readings from the gps
			if gps(readlast) <> 1 then //if the was nothing read from the gps
				errmsg("GPS signal could not be acquired. Please stand outside the building or away from trees as this might block satellite signals");
			else
				HH_LATITUDE = gps(latitude);
				HH_LONGITUDE = gps(longitude);
				HH_ALTITUDE = gps(altitude);
				HH_SATELLITES = gps(satellites);
				HH_ACCURACY = gps(accuracy);
				HH_READ_TIME = gps(readtime);
				errmsg("Successfully recorded the household GPS coordinates");
			endif;
		endif;
		gps(close);
	else
		errmsg("The GPS functionality is not enabled on this tablet. Please enable GPS (Location) on your device and try again");
		exit;
	endif;
end;
//------------------------------DETERMINES IF FIELDS ARE BLANK------------------------------------------------
Function CheckBlank(string value)
	if value = "" then
		errmsg("The field cannot be blank");
		reenter;
	endif;
end;

PROC COP_DICT_FF

PROC INTERVIEW_DATE
preproc
if demode() = add then
		INTERVIEW_DATE = edit("99/99/9999", sysdate("DDMMYYYY"));
		noinput;
endif;
PROC HOUSEHOLD_HEAD_NAMES
CheckBlank(HOUSEHOLD_HEAD_NAMES);// CHECKS IF THE FIELD IS BLANK
	HOUSEHOLD_HEAD_NAMES = toupper(HOUSEHOLD_HEAD_NAMES);
PROC NUMBER_OF_VISITS
preproc

	NUMBER_OF_VISITS = totocc(VISIT_DATE000);
PROC RESPONDENT_NAME

CheckBlank(RESPONDENT_NAME);
RESPONDENT_NAME = toupper(RESPONDENT_NAME);
PROC RESPONDENT_RELATIONSHIP
if RESPONDENT_RELATIONSHIP = 1 and RESPONDENT_NAME <> HOUSEHOLD_HEAD_NAMES then
 errmsg("If this Household head name cannot be different from the one given in the ID")
		select("Correct respondent Name", RESPONDENT_NAME);
 endif;
PROC B1
preproc

	// Automatically fill in person number
	B1 = curocc();
PROC B2
preproc

	//Set name of household head to be the first name in B2
	if curocc() = 1 then
		B2 = HOUSEHOLD_HEAD_NAMES;
	endif;

postproc

	B2 = toupper(B2);

	//Consistency on the name of the household head.
	if curocc() = 1 and B2 <> HOUSEHOLD_HEAD_NAMES then
		errmsg("This Household head name cannot be different from the one given in the ID")
		select("Correct Heads Name", HOUSEHOLD_HEAD_NAMES);
	endif;

	//The name of the household member cannot be blank
	if B2 = "" then
		errmsg("Please enter name of the household member")
//		select("Enter name", B2, "Correct more people response", MORE_PEOPLE(curocc() - 1));
	endif;

	// Set occurrence labels for individual rosters to use name
	string occurrenceLabel = strip(B2);

	setocclabel(PERSON_ROSTER(curocc()), occurrenceLabel);
	setocclabel(DEMOGRAPHIC_ROSTER(curocc()), occurrenceLabel);
PROC ANYMORE_PEOPLE
// End roster if there are no more householding members to enter
	if ANYMORE_PEOPLE = 2 then
		savepartial();
		endgroup;
	endif;
PROC NUMBER_OF_HOUSEHOLD_MEMBERS
preproc

	NUMBER_OF_HOUSEHOLD_MEMBERS = totocc(PERSON_ROSTER);
PROC B3
// If household head is married then his/her spouse must be of different sex.
	if B5(curocc()) = 2 and B3(curocc()) = B3(1) then
		errmsg("If %s is %s's spouse, then they must be of opposite sex",
		strip(B2(curocc())), strip(B2(1)))
		select("Correct household head sex", B3(1),
			   "Correct spouse relationship", B5(curocc()),
			   "Correct spouse sex", B3(curocc()));
	endif;
PROC B4
	//Parent's age should be 12 years more than child's age.
	if B5(curocc()) = 4 and B4(1) < B4(curocc()) + MinAgeDiffBtwnChildAndParent then
		errmsg("%s's age should be 12 years more than %s's age",strip(B2(1)),strip(B2(curocc())))
		select("Correct parent's age",B4(1),"Correct child's age",B4(curocc()));

	//Grandparent's age should be 24 years more than grandchild's age.
	elseif B5(curocc()) = 12 and B4(1) < B4(curocc()) + ( 2 * MinAgeDiffBtwnChildAndParent ) then
		errmsg("%s's age should be 24 years more than %s's age",strip(B2(1)),strip(B2(curocc())))
		select("Correct grandparent's age",B4(1),"Correct grandchild's age",B4(curocc()));

	//Own parent's age should be 12 years more than household head's age.
	elseif B5(curocc()) = 8 and B4(curocc()) < B4(1) + MinAgeDiffBtwnChildAndParent then
		errmsg("%s's age should be 12 years less than %s's age",strip(B2(1)),strip(B2(curocc())))
		select("Correct household head's age",B4(1),"Correct own parent's age",B5(curocc()));

	//Grandparent's age should be 24 years more than grandchild's age.
	elseif B5(curocc()) = 11 and B4(curocc()) < B4(1) + ( 2 * MinAgeDiffBtwnChildAndParent ) then
		errmsg("%s's age should be 24 years more than %s's age",strip(B2(1)),strip(B2(curocc())))
		select("Correct grandparent's age",B4(1),"Correct grandchild's age",B4(curocc()));
	endif;
PROC B5
onfocus

	if curocc() = 1 then
		setvalueset(B5,B5_RELATIONSHIP_OF_HEAD);
	else
		setvalueset(B5,B5_RELATIONSHIP_TO_HEAD);
	endif;
	
postproc
// If household head is married then his/her spouse must be of different sex.
	if B5(curocc()) = 2 and B3(curocc()) = B3(1) then
		errmsg("If %s is %s's spouse, then they must be of opposite sex",
		strip(B2(curocc())), strip(B2(1)))
		select("Correct household head sex", B3(1),
			   "Correct spouse relationship", B5(curocc()),
			   "Correct spouse sex", B3(curocc()));
	endif;
PROC B6
preproc

	//if one is less than 10 years, then they should not be married.
	if B4 < YoungestAgeMarriage then
		B6 = 1;
		skip to B8;
	endif;

postproc

	// Ensure that under 10 is never married
	if B4 < YoungestAgeMarriage and B6 <> 1 then
		errmsg("%s is %d years old and marital status is %s. Under %d years old must never be married.",
		strip(B2(curocc())), B4(curocc()), getlabel(B6_VS1, B6(curocc())),YoungestAgeMarriage)
		select("Correct Age", B4, "Correct Marital Status", B6);
	endif;

	//The Household head and Spouse should have the same marital status
	if B5(curocc()) = 2 then

		if B6(1) = 2 and B6(curocc()) <> 2 then
			errmsg("%s cannot be monogamously married to %s while their marital status is different",
			strip(B2(curocc())), strip(B2(1)))
			select("Correct head marital status",B6(1),"Correct spouse marital status",B6(curocc()),"Correct relationship",B5(curocc()));

		elseif B6(1) = 3 and B6(curocc()) <> 3 then
			errmsg("%s cannot be polygamously married to %s while their marital status is different",
			strip(B2(curocc())), strip(B2(1)))
			select("Correct head marital status",B6(1),"Correct spouse marital status",B6(curocc()),"Correct relationship",B5(curocc()));

		endif;

	endif;

	//skip for Never married (1) or Don't know (9) options
	if B6 in 1,9 then
		skip to next;
	endif;

	
	if B4(curocc()) < YoungestAgeMarriage and B5(curocc()) = 2  then
	  errmsg("%s cannot be a spouse to %s , because is too young.",
			strip(B2(curocc())), strip(B2(1)))
			select("Correct age",B4(curocc()),"Correct relationship",B5(curocc()));
	endif;
PROC B7
 if  B4 <= 10  and B7 > 1 then 
   errmsg("%s is too young to have attained any educational level",
		strip(B2(curocc())))
		select("Correct Current educational level",B7(curocc()));
   endif;
PROC B8
if RESPONDENT_RELATIONSHIP = 1 and curocc(B8)=1 and  B8 <> 1 then
	 errmsg("The Household head is the respondent, so the residential status cannot be different from present")
 	select("Correct Heads residential status", B8);
endif;
PROC LQ01
if $ = 2 then
	endlevel;
endif;
PROC TYPE_OF_LIVESTOCK_RAISED
preproc
 //set the value for the type of livestock raised based on the current row of the roster
if curocc($) = 1 then
	//$(curocc($)) = "Cattle";
		if LQ02 = 2 then
				skip to LQ02(curocc($)+6);//skip to sheep
			else
				skip to LQ02(curocc($)+1);//skip to calves
		endif;
	elseif curocc($) = 2 then
		$(curocc($)) = "Calve";
		if LQ02 = 2 then
			skip to LQ02(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 3 then
		$(curocc($)) = "Improved dairy";
		if LQ02 = 2 then
			skip to LQ02(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 4 then
		$(curocc($)) = "Improve beef";
		if LQ02 = 2 then
			skip to LQ02(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 5 then
		$(curocc($)) = "Oxen";
		if LQ02 = 2 then
			skip to LQ02(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 6 then
		$(curocc($)) = "Indegenous Cattle";
		if LQ02 = 2 then
			skip to LQ02(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 7 then
		//$(curocc($)) = "Sheep";
		if LQ02 = 2 then
			skip to LQ02(curocc($)+3);//skip to goats
		else
			skip to LQ02(curocc($)+1);//skip to Improve Sheep
		endif;
	elseif curocc($) = 8 then
		$(curocc($)) = "Improve Sheep";
		if LQ02 = 2 then
			skip to LQ02(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 9 then
		$(curocc($)) = "Indegenous Sheep";
		if LQ02 = 2 then
			skip to LQ02(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 10 then
		//$(curocc($)) = "Goats";
		if LQ02 = 2 then
			skip to LQ02(curocc($)+3);//skip to pigs
		else
			skip to LQ02(curocc($)+1);//skip to Improved Goats
		endif;
	elseif curocc($) = 11 then
		$(curocc($)) = "Improved Goats";
		if LQ02 = 2 then
			skip to LQ02(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 12 then
		$(curocc($)) = "Indegenous Goats";
		if LQ02 = 2 then
			skip to LQ02(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 13 then
		//$(curocc($)) = "Pigs";
		if LQ02 = 2 then
			skip to LQ02(curocc($)+3);//skip to the next row
		else
			skip to LQ02(curocc($)+1);//skip to Improved Pigs
		endif;
	elseif curocc($) = 14 then
		$(curocc($)) = "Improved Pigs";
		if LQ02 = 2 then
			skip to LQ02(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 15 then
		$(curocc($)) = "Indegenous Pigs";
		if LQ02 = 2 then
			skip to LQ02(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 16 then
		$(curocc($)) = "Horses";
		if LQ02 = 2 then
			skip to LQ02(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 17 then
		$(curocc($)) = "Donkeys";
		if LQ02 = 2 then
			skip to LQ02(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 18 then
		$(curocc($)) = "Mules";
		if LQ02 = 2 then
			skip to LQ02(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 19 then
		//$(curocc($)) = "Chickens";
		if LQ02 = 2 then
			skip to USED_SUPPLIMENT_TYPE(1);//skip to suplements for all cattle
		else
			skip to LQ02(curocc($)+1);//skip to Boilers
		endif;
	elseif curocc($) = 20 then
		$(curocc($)) = "Boilers";
		if LQ02 = 2 then
			skip to LQ02(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 21 then
		$(curocc($)) = "Layers";
		if LQ02 = 2 then
			skip to LQ02(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 22 then
		$(curocc($)) = "Chickens";
		if LQ02 = 2 then
			skip to USED_SUPPLIMENT_TYPE(1);//skip to suplements for all cattle
		endif;
endif;
postproc

PROC LQ9B
numeric currentRow;
do currentRow = 1 while currentRow <= totocc(LIVESTOCK_STOCK)
	if currentRow = 1 and LQ02(currentRow) = 2 then // if have no cattle skip asking about their supplement feed, skip to ship supplement feed
		//skip to USED_SUPPLIMENT_SHEEP(1);
		hasCattle = 2;
	elseif currentRow = 7 and LQ02(currentRow) = 2 then // if have no sheep skip asking about their supplement feed, skip to goats supplement feed
		//skip to USED_SUPPLIMENT_GOATS(1);
		hasSheep = 2;
	elseif currentRow = 10 and LQ02(currentRow) = 2 then // if have no goats skip asking about their supplement feed, skip to chickens supplement feed		
		//skip to USED_SUPPLIMENT_POULTRY(1);
		hasGoats = 2;
	elseif currentRow = 19 and LQ02(currentRow) = 2 then // if have no chickens skip to livestock management and health services		
		//skip to LQ19A(1);
		hasChickens = 2;
	endif;
enddo;
PROC LQ10S_DAIRYCATTLE
preproc
if hasCattle <> 0 then
	$ = hasCattle;
	noinput;
	skip to LQ10S_ALLCATTLE;
endif;

PROC USED_SUPPLIMENT_TYPE
{preproc
numeric currentRow;
do currentRow = 1 while currentRow <= totocc(LIVESTOCK_STOCK)
	if currentRow = 1 and LQ02(currentRow) = 2 then // if have no cattle skip asking about their supplement feed, skip to ship supplement feed
		//skip to USED_SUPPLIMENT_SHEEP;
		hasCattle = 1;
	elseif currentRow = 7 and LQ02(currentRow) = 2 then // if have no sheep skip asking about their supplement feed, skip to goats supplement feed
		//skip to USED_SUPPLIMENT_GOATS;
		hasSheep = 1;
	elseif currentRow = 10 and LQ02(currentRow) = 2 then // if have no sheep skip asking about their supplement feed, skip to goats supplement feed
		//skip to USED_SUPPLIMENT_GOATS;
		hasGoats = 1;
	elseif currentRow = 19 and LQ02(currentRow) = 2 then // if have no chickens skip to livestock management and health services
		//skip to LQ19A(1);
		hasChickens = 1;
	endif;
enddo;}
PROC TYPE_OF_SUPPLIMENT_DAIRY_CATTLE
preproc
if curocc($) = 1 then
	$(curocc($)) = "Fodder/Hay/Grass";
		if USED_SUPPLIMENT_TYPE(curocc($)) = 2 then
				skip to USED_SUPPLIMENT_TYPE(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 2 then
		$(curocc($)) = "Crop Residue";
		if USED_SUPPLIMENT_TYPE = 2 then
			skip to USED_SUPPLIMENT_TYPE(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 3 then
		$(curocc($)) = "Feed Concentrete";
		if USED_SUPPLIMENT_TYPE = 2 then
			skip to USED_SUPPLIMENT_TYPE(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 4 then
		$(curocc($)) = "Dairy Meal";
		if USED_SUPPLIMENT_TYPE = 2 then
			skip to USED_SUPPLIMENT_TYPE(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 5 then
		$(curocc($)) = "Poultry Meal";
		if USED_SUPPLIMENT_TYPE = 2 then
			skip to USED_SUPPLIMENT_TYPE(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 6 then
		$(curocc($)) = "Sheep Palets";
		if USED_SUPPLIMENT_TYPE = 2 then
			skip to USED_SUPPLIMENT_TYPE(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 7 then
		$(curocc($)) = "Moroko";
		if USED_SUPPLIMENT_TYPE = 2 then
			skip to USED_SUPPLIMENT_TYPE(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 8 then
		$(curocc($)) = "Seameal/Bran";
		if USED_SUPPLIMENT_TYPE = 2 then
			skip to USED_SUPPLIMENT_TYPE(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 9 then
		$(curocc($)) = "Salt";
		if USED_SUPPLIMENT_TYPE = 2 then
			skip to USED_SUPPLIMENT_TYPE(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 10 then
		$(curocc($)) = "Mineral Block";
		if USED_SUPPLIMENT_TYPE = 2 then
			skip to USED_SUPPLIMENT_ALL_CATTLE(1);//skip to suplements used for all cattle
		endif;
endif;
PROC LQ10S_ALLCATTLE
preproc
if hasCattle <> 0 then
	$ = hasCattle;
	noinput;
	skip to LQ10S_SHEEP;
endif;
PROC TYPE_OF_SUPPLIMENT_ALL_CATTLE
preproc
if curocc($) = 1 then
	$(curocc($)) = "Fodder/Hay/Grass";
		if USED_SUPPLIMENT_ALL_CATTLE(curocc($)) = 2 then
				skip to USED_SUPPLIMENT_ALL_CATTLE(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 2 then
		$(curocc($)) = "Crop Residue";
		if USED_SUPPLIMENT_ALL_CATTLE = 2 then
			skip to USED_SUPPLIMENT_ALL_CATTLE(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 3 then
		$(curocc($)) = "Feed Concentrete";
		if USED_SUPPLIMENT_ALL_CATTLE = 2 then
			skip to USED_SUPPLIMENT_ALL_CATTLE(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 4 then
		$(curocc($)) = "Dairy Meal";
		if USED_SUPPLIMENT_ALL_CATTLE = 2 then
			skip to USED_SUPPLIMENT_ALL_CATTLE(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 5 then
		$(curocc($)) = "Poultry Meal";
		if USED_SUPPLIMENT_ALL_CATTLE = 2 then
			skip to USED_SUPPLIMENT_ALL_CATTLE(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 6 then
		$(curocc($)) = "Sheep Palets";
		if USED_SUPPLIMENT_ALL_CATTLE = 2 then
			skip to USED_SUPPLIMENT_ALL_CATTLE(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 7 then
		$(curocc($)) = "Moroko";
		if USED_SUPPLIMENT_ALL_CATTLE = 2 then
			skip to USED_SUPPLIMENT_ALL_CATTLE(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 8 then
		$(curocc($)) = "Seameal/Bran";
		if USED_SUPPLIMENT_ALL_CATTLE = 2 then
			skip to USED_SUPPLIMENT_ALL_CATTLE(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 9 then
		$(curocc($)) = "Salt";
		if USED_SUPPLIMENT_ALL_CATTLE = 2 then
			skip to USED_SUPPLIMENT_ALL_CATTLE(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 10 then
		$(curocc($)) = "Mineral Block";
		if USED_SUPPLIMENT_ALL_CATTLE = 2 then
			skip to USED_SUPPLIMENT_SHEEP(1);//skip to suplements used for sheep
		endif;

endif;
PROC LQ10S_SHEEP
preproc
if hasSheep <> 0 then
	$ = hasSheep;
	noinput;
	skip to LQ10S_GOATS;
endif;
PROC TYPE_OF_SUPPLIMENT_SHEEP
preproc
if curocc($) = 1 then
	$(curocc($)) = "Fodder/Hay/Grass";
		if USED_SUPPLIMENT_SHEEP(curocc($)) = 2 then
				skip to USED_SUPPLIMENT_SHEEP(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 2 then
		$(curocc($)) = "Crop Residue";
		if USED_SUPPLIMENT_SHEEP = 2 then
			skip to USED_SUPPLIMENT_SHEEP(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 3 then
		$(curocc($)) = "Feed Concentrete";
		if USED_SUPPLIMENT_SHEEP = 2 then
			skip to USED_SUPPLIMENT_SHEEP(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 4 then
		$(curocc($)) = "Dairy Meal";
		if USED_SUPPLIMENT_SHEEP = 2 then
			skip to USED_SUPPLIMENT_SHEEP(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 5 then
		$(curocc($)) = "Poultry Meal";
		if USED_SUPPLIMENT_SHEEP = 2 then
			skip to USED_SUPPLIMENT_SHEEP(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 6 then
		$(curocc($)) = "Sheep Palets";
		if USED_SUPPLIMENT_SHEEP = 2 then
			skip to USED_SUPPLIMENT_SHEEP(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 7 then
		$(curocc($)) = "Moroko";
		if USED_SUPPLIMENT_SHEEP = 2 then
			skip to USED_SUPPLIMENT_SHEEP(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 8 then
		$(curocc($)) = "Seameal/Bran";
		if USED_SUPPLIMENT_SHEEP = 2 then
			skip to USED_SUPPLIMENT_SHEEP(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 9 then
		$(curocc($)) = "Salt";
		if USED_SUPPLIMENT_SHEEP = 2 then
			skip to USED_SUPPLIMENT_SHEEP(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 10 then
		$(curocc($)) = "Mineral Block";
		if USED_SUPPLIMENT_SHEEP = 2 then
			skip to USED_SUPPLIMENT_GOATS(1);//skip to suplements used for sheep
		endif;

endif;
PROC LQ10S_GOATS
preproc
if hasGoats <> 0 then
	$ = hasGoats;
	noinput;
	skip to LQ10S_POULTRY;
endif;
PROC TYPE_OF_SUPPLIMENT_GOATS
preproc
if curocc($) = 1 then
	$(curocc($)) = "Fodder/Hay/Grass";
		if USED_SUPPLIMENT_GOATS(curocc($)) = 2 then
				skip to USED_SUPPLIMENT_GOATS(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 2 then
		$(curocc($)) = "Crop Residue";
		if USED_SUPPLIMENT_GOATS = 2 then
			skip to USED_SUPPLIMENT_GOATS(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 3 then
		$(curocc($)) = "Feed Concentrete";
		if USED_SUPPLIMENT_GOATS = 2 then
			skip to USED_SUPPLIMENT_GOATS(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 4 then
		$(curocc($)) = "Dairy Meal";
		if USED_SUPPLIMENT_GOATS = 2 then
			skip to USED_SUPPLIMENT_GOATS(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 5 then
		$(curocc($)) = "Poultry Meal";
		if USED_SUPPLIMENT_GOATS = 2 then
			skip to USED_SUPPLIMENT_GOATS(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 6 then
		$(curocc($)) = "Sheep Palets";
		if USED_SUPPLIMENT_GOATS = 2 then
			skip to USED_SUPPLIMENT_GOATS(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 7 then
		$(curocc($)) = "Moroko";
		if USED_SUPPLIMENT_GOATS = 2 then
			skip to USED_SUPPLIMENT_GOATS(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 8 then
		$(curocc($)) = "Seameal/Bran";
		if USED_SUPPLIMENT_GOATS = 2 then
			skip to USED_SUPPLIMENT_GOATS(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 9 then
		$(curocc($)) = "Salt";
		if USED_SUPPLIMENT_GOATS = 2 then
			skip to USED_SUPPLIMENT_GOATS(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 10 then
		$(curocc($)) = "Mineral Block";
		if USED_SUPPLIMENT_GOATS = 2 then
			skip to USED_SUPPLIMENT_POULTRY(1);//skip to suplements used for poultry
		endif;
endif;
PROC LQ10S_POULTRY
preproc
if hasChickens <> 0 then
	$ = hasChickens;
	noinput;
	skip to LQ10W_DAIRYCATTLE;
endif;
PROC TYPE_OF_SUPPLIMENT_POULTRY
preproc
if curocc($) = 1 then
	$(curocc($)) = "Fodder/Hay/Grass";
		if USED_SUPPLIMENT_POULTRY(curocc($)) = 2 then
				skip to USED_SUPPLIMENT_POULTRY(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 2 then
		$(curocc($)) = "Crop Residue";
		if USED_SUPPLIMENT_POULTRY = 2 then
			skip to USED_SUPPLIMENT_POULTRY(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 3 then
		$(curocc($)) = "Feed Concentrete";
		if USED_SUPPLIMENT_POULTRY = 2 then
			skip to USED_SUPPLIMENT_POULTRY(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 4 then
		$(curocc($)) = "Dairy Meal";
		if USED_SUPPLIMENT_POULTRY = 2 then
			skip to USED_SUPPLIMENT_POULTRY(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 5 then
		$(curocc($)) = "Poultry Meal";
		if USED_SUPPLIMENT_POULTRY = 2 then
			skip to USED_SUPPLIMENT_POULTRY(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 6 then
		$(curocc($)) = "Sheep Palets";
		if USED_SUPPLIMENT_POULTRY = 2 then
			skip to USED_SUPPLIMENT_POULTRY(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 7 then
		$(curocc($)) = "Moroko";
		if USED_SUPPLIMENT_POULTRY = 2 then
			skip to USED_SUPPLIMENT_POULTRY(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 8 then
		$(curocc($)) = "Seameal/Bran";
		if USED_SUPPLIMENT_POULTRY = 2 then
			skip to USED_SUPPLIMENT_POULTRY(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 9 then
		$(curocc($)) = "Salt";
		if USED_SUPPLIMENT_POULTRY = 2 then
			skip to USED_SUPPLIMENT_POULTRY(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 10 then
		$(curocc($)) = "Mineral Block";
		if USED_SUPPLIMENT_POULTRY = 2 then
			skip to USED_SUPPLIMENT_TYPW(1);//skip to suplements used for sheep
		endif;
endif;
PROC WINTER_FEED
{preproc
numeric currentRow;
do currentRow = 1 while currentRow <= totocc(LIVESTOCK_STOCK)
	if currentRow = 1 and LQ02(currentRow) = 2 then // if have no cattle skip asking about their supplement feed, skip to ship supplement feed
		skip to USED_SUPPLIMENT_SHEEPW(1);
	elseif currentRow = 7 and LQ02(currentRow) = 2 then // if have no sheep skip asking about their supplement feed, skip to goats supplement feed
		skip to USED_SUPPLIMENT_GOATW(1);
	elseif currentRow = 10 and LQ02(currentRow) = 2 then // if have no goats skip asking about their supplement feed, skip to chickens supplement feed		
		skip to USED_SUPPLIMENT_POULTRYW(1);
	elseif currentRow = 19 and LQ02(currentRow) = 2 then // if have no chickens skip to livestock management and health services		
		skip to LQ19A(1);
	endif;
enddo;}
PROC LQ10W_DAIRYCATTLE
preproc
if hasCattle <> 0 then
	$ = hasCattle;
	noinput;
	skip to LQ10W_ALLCATTLE;
endif;
PROC USED_SUPPLIMENT_TYPW
preproc
numeric currentRow;
do currentRow = 1 while currentRow <= totocc(LIVESTOCK_STOCK)
	if currentRow = 1 and LQ02(currentRow) = 2 then // if have no cattle skip asking about their supplement feed, skip to ship supplement feed
		skip to USED_SUPPLIMENT_SHEEPW;
	elseif currentRow = 7 and LQ02(currentRow) = 2 then // if have no sheep skip asking about their supplement feed, skip to goats supplement feed
		skip to USED_SUPPLIMENT_GOATW;
	elseif currentRow = 19 and LQ02(currentRow) = 2 then // if have no chickens skip to livestock management and health services
		skip to LQ19A(1);
	endif;
enddo;
PROC TYPE_OF_SUPPLIMENEW
preproc
if curocc($) = 1 then
	$(curocc($)) = "Fodder/Hay/Grass";
		if USED_SUPPLIMENT_TYPW(curocc($)) = 2 then
				skip to USED_SUPPLIMENT_TYPW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 2 then
		$(curocc($)) = "Crop Residue";
		if USED_SUPPLIMENT_TYPW = 2 then
			skip to USED_SUPPLIMENT_TYPW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 3 then
		$(curocc($)) = "Feed Concentrete";
		if USED_SUPPLIMENT_TYPW = 2 then
			skip to USED_SUPPLIMENT_TYPW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 4 then
		$(curocc($)) = "Dairy Meal";
		if USED_SUPPLIMENT_TYPW = 2 then
			skip to USED_SUPPLIMENT_TYPW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 5 then
		$(curocc($)) = "Poultry Meal";
		if USED_SUPPLIMENT_TYPW = 2 then
			skip to USED_SUPPLIMENT_TYPW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 6 then
		$(curocc($)) = "Sheep Palets";
		if USED_SUPPLIMENT_TYPW = 2 then
			skip to USED_SUPPLIMENT_TYPW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 7 then
		$(curocc($)) = "Moroko";
		if USED_SUPPLIMENT_TYPW = 2 then
			skip to USED_SUPPLIMENT_TYPW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 8 then
		$(curocc($)) = "Seameal/Bran";
		if USED_SUPPLIMENT_TYPW = 2 then
			skip to USED_SUPPLIMENT_TYPW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 9 then
		$(curocc($)) = "Salt";
		if USED_SUPPLIMENT_TYPW = 2 then
			skip to USED_SUPPLIMENT_TYPW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 10 then
		$(curocc($)) = "Mineral Block";
		if USED_SUPPLIMENT_TYPW = 2 then
			skip to USED_SUPPLIMENT_ALL_CATTLEW(1);//skip to suplements used for all cattle
		endif;
endif;
PROC LQ10W_ALLCATTLE
preproc
if hasCattle <> 0 then
	$ = hasCattle;
	noinput;
	skip to LQ10W_SHEEP;
endif;
PROC TYPE_OF_SUPPLIMENT_ALL_CATTLEW
preproc
if curocc($) = 1 then
	$(curocc($)) = "Fodder/Hay/Grass";
		if USED_SUPPLIMENT_ALL_CATTLEW(curocc($)) = 2 then
				skip to USED_SUPPLIMENT_ALL_CATTLEW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 2 then
		$(curocc($)) = "Crop Residue";
		if USED_SUPPLIMENT_ALL_CATTLEW = 2 then
			skip to USED_SUPPLIMENT_ALL_CATTLEW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 3 then
		$(curocc($)) = "Feed Concentrete";
		if USED_SUPPLIMENT_ALL_CATTLEW = 2 then
			skip to USED_SUPPLIMENT_ALL_CATTLEW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 4 then
		$(curocc($)) = "Dairy Meal";
		if USED_SUPPLIMENT_ALL_CATTLEW = 2 then
			skip to USED_SUPPLIMENT_ALL_CATTLEW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 5 then
		$(curocc($)) = "Poultry Meal";
		if USED_SUPPLIMENT_ALL_CATTLEW = 2 then
			skip to USED_SUPPLIMENT_ALL_CATTLEW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 6 then
		$(curocc($)) = "Sheep Palets";
		if USED_SUPPLIMENT_ALL_CATTLEW = 2 then
			skip to USED_SUPPLIMENT_ALL_CATTLEW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 7 then
		$(curocc($)) = "Moroko";
		if USED_SUPPLIMENT_ALL_CATTLEW = 2 then
			skip to USED_SUPPLIMENT_ALL_CATTLEW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 8 then
		$(curocc($)) = "Seameal/Bran";
		if USED_SUPPLIMENT_ALL_CATTLEW = 2 then
			skip to USED_SUPPLIMENT_ALL_CATTLEW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 9 then
		$(curocc($)) = "Salt";
		if USED_SUPPLIMENT_ALL_CATTLEW = 2 then
			skip to USED_SUPPLIMENT_ALL_CATTLEW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 10 then
		$(curocc($)) = "Mineral Block";
		if USED_SUPPLIMENT_ALL_CATTLEW = 2 then
			skip to USED_SUPPLIMENT_SHEEPW(1);//skip to suplements used for sheep
		endif;
endif;
PROC LQ10W_SHEEP
preproc
if hasSheep <> 0 then
	$ = hasSheep;
	noinput;
	skip to LQ10W_GOATS;
endif;
PROC TYPE_OF_SUPPLIMENT_SHEEPW
preproc
if curocc($) = 1 then
	$(curocc($)) = "Fodder/Hay/Grass";
		if USED_SUPPLIMENT_SHEEPW(curocc($)) = 2 then
				skip to USED_SUPPLIMENT_SHEEPW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 2 then
		$(curocc($)) = "Crop Residue";
		if USED_SUPPLIMENT_SHEEPW = 2 then
			skip to USED_SUPPLIMENT_SHEEPW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 3 then
		$(curocc($)) = "Feed Concentrete";
		if USED_SUPPLIMENT_SHEEPW = 2 then
			skip to USED_SUPPLIMENT_SHEEPW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 4 then
		$(curocc($)) = "Dairy Meal";
		if USED_SUPPLIMENT_SHEEPW = 2 then
			skip to USED_SUPPLIMENT_SHEEPW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 5 then
		$(curocc($)) = "Poultry Meal";
		if USED_SUPPLIMENT_SHEEPW = 2 then
			skip to USED_SUPPLIMENT_SHEEPW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 6 then
		$(curocc($)) = "Sheep Palets";
		if USED_SUPPLIMENT_SHEEPW = 2 then
			skip to USED_SUPPLIMENT_SHEEPW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 7 then
		$(curocc($)) = "Moroko";
		if USED_SUPPLIMENT_SHEEPW = 2 then
			skip to USED_SUPPLIMENT_SHEEPW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 8 then
		$(curocc($)) = "Seameal/Bran";
		if USED_SUPPLIMENT_SHEEPW = 2 then
			skip to USED_SUPPLIMENT_SHEEPW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 9 then
		$(curocc($)) = "Salt";
		if USED_SUPPLIMENT_SHEEPW = 2 then
			skip to USED_SUPPLIMENT_SHEEPW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 10 then
		$(curocc($)) = "Mineral Block";
		if USED_SUPPLIMENT_SHEEPW = 2 then
			skip to USED_SUPPLIMENT_GOATW(1);//skip to suplements used for goats
		endif;
endif;
PROC LQ10W_GOATS
preproc
if hasGoats <> 0 then
	$ = hasGoats;
	noinput;
	skip to LQ10W_POULTRY;
endif;
PROC TYPE_OF_SUPPLIMENT_GOATW
preproc
if curocc($) = 1 then
	$(curocc($)) = "Fodder/Hay/Grass";
		if USED_SUPPLIMENT_GOATW(curocc($)) = 2 then
				skip to USED_SUPPLIMENT_GOATW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 2 then
		$(curocc($)) = "Crop Residue";
		if USED_SUPPLIMENT_GOATW = 2 then
			skip to USED_SUPPLIMENT_GOATW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 3 then
		$(curocc($)) = "Feed Concentrete";
		if USED_SUPPLIMENT_GOATW = 2 then
			skip to USED_SUPPLIMENT_GOATW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 4 then
		$(curocc($)) = "Dairy Meal";
		if USED_SUPPLIMENT_GOATW = 2 then
			skip to USED_SUPPLIMENT_GOATW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 5 then
		$(curocc($)) = "Poultry Meal";
		if USED_SUPPLIMENT_GOATW = 2 then
			skip to USED_SUPPLIMENT_GOATW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 6 then
		$(curocc($)) = "Sheep Palets";
		if USED_SUPPLIMENT_GOATW = 2 then
			skip to USED_SUPPLIMENT_GOATW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 7 then
		$(curocc($)) = "Moroko";
		if USED_SUPPLIMENT_GOATW = 2 then
			skip to USED_SUPPLIMENT_GOATW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 8 then
		$(curocc($)) = "Seameal/Bran";
		if USED_SUPPLIMENT_GOATW = 2 then
			skip to USED_SUPPLIMENT_GOATW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 9 then
		$(curocc($)) = "Salt";
		if USED_SUPPLIMENT_GOATW = 2 then
			skip to USED_SUPPLIMENT_GOATW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 10 then
		$(curocc($)) = "Mineral Block";
		if USED_SUPPLIMENT_GOATW = 2 then
			skip to USED_SUPPLIMENT_POULTRYW(1);//skip to suplements used for poultry
		endif;
endif;
PROC LQ10W_POULTRY
preproc
if hasChickens <> 0 then
	$ = hasChickens;
	noinput;
	skip to LQ19A(1);
endif;
PROC USED_SUPPLIMENT_POULTRYW000
preproc
if hasChickens <> 0 then
	$ = hasChickens;
	noinput;
	skip to LQ10W_DAIRYCATTLE;
endif;
PROC TYPE_OF_SUPPLIMENT_POULTRYW
preproc
if curocc($) = 1 then
	$(curocc($)) = "Fodder/Hay/Grass";
		if USED_SUPPLIMENT_POULTRYW(curocc($)) = 2 then
				skip to USED_SUPPLIMENT_POULTRYW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 2 then
		$(curocc($)) = "Crop Residue";
		if USED_SUPPLIMENT_POULTRYW = 2 then
			skip to USED_SUPPLIMENT_POULTRYW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 3 then
		$(curocc($)) = "Feed Concentrete";
		if USED_SUPPLIMENT_POULTRYW = 2 then
			skip to USED_SUPPLIMENT_POULTRYW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 4 then
		$(curocc($)) = "Dairy Meal";
		if USED_SUPPLIMENT_POULTRYW = 2 then
			skip to USED_SUPPLIMENT_POULTRYW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 5 then
		$(curocc($)) = "Poultry Meal";
		if USED_SUPPLIMENT_POULTRYW = 2 then
			skip to USED_SUPPLIMENT_POULTRYW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 6 then
		$(curocc($)) = "Sheep Palets";
		if USED_SUPPLIMENT_POULTRYW = 2 then
			skip to USED_SUPPLIMENT_POULTRYW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 7 then
		$(curocc($)) = "Moroko";
		if USED_SUPPLIMENT_POULTRYW = 2 then
			skip to USED_SUPPLIMENT_POULTRYW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 8 then
		$(curocc($)) = "Seameal/Bran";
		if USED_SUPPLIMENT_POULTRYW = 2 then
			skip to USED_SUPPLIMENT_POULTRYW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 9 then
		$(curocc($)) = "Salt";
		if USED_SUPPLIMENT_POULTRYW = 2 then
			skip to USED_SUPPLIMENT_POULTRYW(curocc($)+1);//skip to the next row
		endif;
	elseif curocc($) = 10 then
		$(curocc($)) = "Mineral Block";
		if USED_SUPPLIMENT_POULTRYW = 2 then
			skip to LQ19A(1);//skip to livestock management
		endif;
endif;
PROC LIVESTOCK_MANAGEMENT_AND_HEAT000
{preproc
numeric currentRow;
do currentRow = 1 while currentRow <= totocc(LIVESTOCK_STOCK)
	if currentRow = 1 and LQ02(currentRow) = 2 then // if have no cattle skip asking about if they were de-wormed supplement feed, skip to ship 
		skip to LQ19A(2);
	elseif currentRow = 7 and LQ02(currentRow) = 2 then // if have no sheep skip asking about if they were de-wormed supplement feed, skip to goats
		skip to LQ19A(3);
	elseif currentRow = 19 and LQ02(currentRow) = 2 then // if have no chickens skip asking about if they were de-wormed supplement feed, skip to Labour costs
		//skip to LABOUR COSTS;
	endif;
enddo;}
if hasCattle <> 0 then
	//skip to 
endif;
PROC LQ19A

postproc
//GIVE LABELS OF TYPE OF LIVESTOCK DEPENDING ON THE ROW NUMBER IN THE ROSTER
if curocc($) = 1 then
	LIVESTOCK_NAME(curocc($)) = "Cattle";//IF ROW NUMBER IS 1 THEN WE ARE ON CATTLE
	elseif curocc($) = 2 then
		LIVESTOCK_NAME(curocc($)) = "Sheep";//IF ROW NUMBER IS 2 THEN WE ARE ON SHEEP
	elseif curocc($) = 3 then
		LIVESTOCK_NAME(curocc($)) = "Goats";//IF ROW NUMBER IS 3 THEN WE ARE ON GOATS
	elseif curocc($) = 4 then
		LIVESTOCK_NAME(curocc($)) = "Poultry (Exotic)";//IF ROW NUMBER IS 3 THEN WE ARE ON POULTRY EXOTIC
endif;

//GIVE SKIPS TO LQ20A DEPENDING ON THE ANSWER GIVEN (WHEN ANSWER IS 2)
if curocc($) = 1 then
	if $ = 2 then
		skip to $(curocc($)+1);
	endif;
elseif curocc($) = 2 then
	if $ = 2 then
		skip to $(curocc($)+1);
	endif;
elseif curocc($) = 3 then
	if $ = 2 then
		skip to $(curocc($)+1);
	endif;
elseif curocc($) = 4 then
	if $ = 2 then
		//skip to LABOUR COSTS;
	endif;		
endif;
PROC LQ20C
//IF THE GIVEN ANSWER IS NOT EQUAL TO 4 SKIP OTHER MAIN SOURCE TO LQ21A ELSE SKIP TO OTHER MAIN SOURCE
if curocc($) = 1 then
	if $ in 1:4 then
		skip to LQ21A(curocc($));
	else
		skip to LQ20C_OTHER(curocc($));
	endif;
elseif curocc($) = 2 then
	if $ in 1:4 then
		skip to LQ21A(curocc($));
	else
		skip to LQ20C_OTHER(curocc($));
	endif;
elseif curocc($) = 3 then
	if $ in 1:4 then
		skip to LQ21A(curocc($));
	else
		skip to LQ20C_OTHER(curocc($));
	endif;
elseif curocc($) = 4 then
	if $ in 1:4 then
		skip to LQ21A(curocc($));
	else
		skip to LQ20C_OTHER(curocc($));
	endif;	
endif;
PROC LQ20C_OTHER
//IF THE GIVEN ANSWER IS NOT EQUAL TO 4 SKIP OTHER MAIN SOURCE TO LQ21A ELSE SKIP TO OTHER MAIN SOURCE
if curocc($) = 1 then
	if LQ20C(curocc($)) = 5 then
		CheckBlank(LQ20C_OTHER);
	endif;
elseif curocc($) = 2 then
	if LQ20C(curocc($)) = 5 then
		CheckBlank(LQ20C_OTHER);
	endif;
elseif curocc($) = 3 then
	if LQ20C(curocc($)) = 5 then
		CheckBlank(LQ20C_OTHER);
	endif;
elseif curocc($) = 4 then
	if LQ20C(curocc($)) = 5 then
		CheckBlank(LQ20C_OTHER);
	endif;	
endif;
PROC LQ22
//IF THE GIVEN ANSWER IS NOT EQUAL TO 4 SKIP OTHER MAIN SOURCE TO LQ21A ELSE SKIP TO OTHER MAIN SOURCE
if curocc($) = 1 then
	if $(curocc($)) = 2 then
		skip to LQ19A(2);
	endif;
elseif curocc($) = 2 then
	if $(curocc($)) = 2 then
		skip to LQ19A(3);
	endif;
elseif curocc($) = 3 then
	if $(curocc($)) = 2 then
		skip to LQ19A(4);
	endif;
elseif curocc($) = 4 then
	if $(curocc($)) = 2 then
		//SKIP TO LABOUR COSTS
	endif;
endif;
PROC LQ24
if $ = 2 then 
	skip to  LQ26;
endif;
PROC LQ26
if $ = 2 then 
	skip to  LQ30;
endif;
PROC LQ30
if $ = 2 then 
	skip to  LQ34;
endif;
PROC LQ34
if $ = 2 then 
	skip to  LQ40S;
endif;
PROC LQ45A
if $ = 2 then 
	skip to  LQ46A;
endif;
PROC LQ45B
if $ = 2 then 
	skip to  LQ46A;
endif;
PROC LQ46A
if $ = 2 then 
	endlevel;
endif;
PROC LQ46B
preproc
if LQ01 = 2 then
	noinput;
endif;
